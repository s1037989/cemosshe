#!/bin/sh
# v11.11.08

#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#
# 	function library - please call with external script
#
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

#############################################################################
# CeMoSSHe: CEntral MOnitoring in a Simple SHell Environment
#
# Copyright (C) 2003- Volker Tanger
# Copyright (C) 2011- Stefan Adams
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# For bug reports and suggestions or if you just want to talk to me please
# contact me at stefan@cogentinnovators.com
#
# Updates will be available at  http://www.cogent-it.com/software/cemosshe/
# please check there for updates prior to submitting patches!
#
# For list of changes please refer to the HISTORY file. Thanks.
#############################################################################



#############################################################################
### System: uptime and updates
#############################################################################

function ForceStatus () {
    CemossheLog "$FUNCNAME $1 $2"
    echo | Cemosshe "$FUNCNAME $1" "$2"
}

#---------------------------------------------------------
# DynamicIPCheck - ALERT if dhclient is running, which means that this server may have a dynamic IP assigned to it
#---------------------------------------------------------
function StaticIPCheck () {
    CemossheLog "$FUNCNAME"
    unset STATUS IP
    if ps axf | grep -q dhclient | grep -q -v grep; then
        STATUS=ALERT
        /sbin/ifconfig $(ps -eo args | grep dhclient | grep -v grep | awk '{print $NF}') | grep 'inet addr:'| cut -d: -f2 | awk '{ print $1}' | Cemosshe "Dynamic IPs" "ALERT"
    else
        echo | Cemosshe "No Dynamic IPs" "OK"
    fi
}

#---------------------------------------------------------
# SnapshotsCheck - store lastrun-warn/alert-days lastok-warn/alert-days
#---------------------------------------------------------
function SnapshotsCheck () {
    [ -z "$1" ] && return
    CemossheLog "$FUNCNAME $1"
    [ -d "$1" ] && for i in $(find "$1" -mindepth 2 -maxdepth 2 -type d | cut -d/ -f4,5); do
        STORE="$1/$i"
        CemossheLog "$FUNCNAME $STORE"
        # Minimum minutes between snapshots
        unset LASTRUN LASTOK
        [ -e "$STORE/latest" ] && LASTRUN=$(readlink "$STORE/latest" | sed -e 's#^.*\([0-9]\{8\}\)\([0-9]\{2\}:[0-9]\{2\}:[0-9]\{2\}\).*#\1 \2#')
        LASTRUN=$((($(date +%s)-$(date -d "$LASTRUN" +%s))/60/60/24))
        [ -z "$LASTRUN" ] && LASTRUN=$((($(date +%s)-$(date -d "19700101 00:00:00" +%s))/60/60/24))
        LASTOK=$(find "$STORE" -maxdepth 1 -type d \( -name "*-ok-*" -o -name "*-partial-*" \) | sort | tail -1 | sed -e 's#^.*\([0-9]\{8\}\)\([0-9]\{2\}:[0-9]\{2\}:[0-9]\{2\}\).*#\1 \2#')
        LASTOK=$((($(date +%s)-$(date -d "$LASTOK" +%s))/60/60/24))
        [ -z "$LASTOK" ] && LASTOK=$((($(date +%s)-$(date -d "19700101 00:00:00" +%s))/60/60/24))
        if [ "$LASTRUN" -ge ${3-:0} -o "$LASTOK" -ge ${5:-0} ]; then
            STATUS="ALERT"
        elif [ "$LASTRUN" -ge ${2:-0} -o "$LASTOK" -ge ${4:-0} ]; then
            STATUS="WARN"
        else
            STATUS="OK"
        fi
        echo "$DATE;$TIME;$SYSTEMGROUP;$SYSTEMNAME;$PROPERTYGROUP;$FUNCNAME_${i##*/};$STATUS;$LASTOK;<div class='collapsable'>Snapshot last run $LASTRUN days ago and last succeeded $LASTOK days ago<pre>About this server:<br />$([ -e $STORE/.about ] && cat $STORE/.about)<br />Successful archives:<br \/>$(find $STORE -maxdepth 1 -type d \( -name "*-ok-*" -o -name "*-partial-*" \) | sort | sed -e 's/$/<br \/>/' | paste -s)<br \/><br \/>Latest Log:<br \/>$(egrep -e 'Number of files:|Total file size:' $STORE/latest.log | sed -e 's/$/<br \/>/' | paste -s)<br \/></pre></div>" >> $TEMPDIR/tmp.$$.collected.tmp
    done
}

#---------------------------------------------------------
# HostsFileCheck
#---------------------------------------------------------
function HostsFileCheck () {
    CemossheLog "$FUNCNAME"
    HOST=`/bin/hostname`
    FQDN=`/bin/hostname -f`
    DOMAIN=`/bin/hostname -d`
    if [ "$HOST.$DOMAIN" = "$FQDN" ]; then
        STATUS="OK"
        echo "$HOST . $DOMAIN"
    else
        STATUS="WARN"
        echo "$HOST . $DOMAIN"
    fi | Cemosshe "$FUNCNAME" "$STATUS"
}

#---------------------------------------------------------
# Days Up Check - warn;alert - days
#---------------------------------------------------------
function DaysUpCheck () {
    CemossheLog "$FUNCNAME"
    DAYSUP=$(($(cut -d '.' -f 1 /proc/uptime)/60/60/24))
    if [ "$DAYSUP" -le $2 ]; then
        STATUS="ALERT"
    elif [ "$DAYSUP" -le $1 ]; then
        STATUS="WARN"
    else
        STATUS="OK"
    fi
    echo "Uptime (in days): $DAYSUP" | Cemosshe "$FUNCNAME" "$STATUS"
}

#---------------------------------------------------------
# Updates Available - if true alert; if false ok
#---------------------------------------------------------
function UpdatesAvailable () {
    CemossheLog "$FUNCNAME"
    # Ubuntu
    if [ -x /usr/lib/update-notifier/apt-check ]; then
        A=`/usr/lib/update-notifier/apt-check 2>&1 | cut -d';' -f1`
        S=`/usr/lib/update-notifier/apt-check 2>&1 | cut -d';' -f2`
        RR=`/usr/lib/update-notifier/apt-check 2>&1 --human-readable | sed -e 's/$/<br \/>/' | paste -s`
        if [ "${S:-0}" -ne 0 ]; then
            STATUS1=ALERT; STATUS2=${S:-0}
        elif [ "${A:-0}" -ne 0 ]; then
            STATUS1=WARN; STATUS2=${A:-0}
        else
            STATUS1=OK; STATUS2=0
        fi
        RR=${RR:-No updates available}
        echo "$RR" | Cemosshe "$FUNCNAME" "$STATUS1" "$STATUS2"
    fi
}

#---------------------------------------------------------
# Release Upgrade Check - if true alert; if false ok
#---------------------------------------------------------
function ReleaseUpgrade () {
    CemossheLog "$FUNCNAME"
    # Ubuntu
    if [ -x /usr/lib/update-manager/release-upgrade-motd ]; then
        RR=`/usr/lib/update-manager/release-upgrade-motd | sed 's/\*/#/g' | sed -e 's/$/<br \/>/' | paste -s`
        [ -z "$RR" ] && STATUS1=OK || STATUS1=ALERT
        [ -z "$RR" ] && STATUS2=0 || STATUS2=1
        RR=${RR:-No upgrades available}
        echo "$RR" | Cemosshe "$FUNCNAME" "$STATUS1" "$STATUS2"
    fi
}

#---------------------------------------------------------
# Reboot Required Check - if true alert; if false ok
#---------------------------------------------------------
function RebootRequired () {
    CemossheLog "$FUNCNAME"
    # Ubuntu
    if [ -x /usr/lib/update-notifier/update-motd-reboot-required ]; then
        RR=`/usr/lib/update-notifier/update-motd-reboot-required | sed 's/\*/#/g' | sed -e 's/$/<br \/>/' | paste -s`
        [ -z "$RR" ] && STATUS1=OK || STATUS1=ALERT
        [ -z "$RR" ] && STATUS2=0 || STATUS2=1
        RR=${RR:-No reboot required}
        echo "$RR" | Cemosshe "$FUNCNAME" "$STATUS1" "$STATUS2"
    fi
}


#############################################################################
#############################################################################
