#!/bin/sh
# v11.11.08

ifconfig () {

   if [ `which perl` -a $# -le 1 ]; then
       [ -s /etc/groupname ] && echo Group: $(</etc/groupname)
       echo Hostname: $(hostname)
       echo Domainname: $(hostname -d)
       echo Default route: $(route -n | grep ^0.0.0.0 | perl -pi -e 'split /\s+/; $_=$_[1]') \($(route -n | grep ^0.0.0.0 | perl -pi -e 'split /\s+/; $_=$_[-1]')\)
       echo DNS Servers: $(grep nameserver /etc/resolv.conf | perl -pi -e 'split /\s+/; $_="$_[-1]\n"' | paste -s -d ' ')
       for iface in $(/sbin/ifconfig $1 | awk '$0 ~ "^eth[^[:space:]]" { print $1}');
       do
           driver=$(getnic $iface)
           driver="${driver##*/}          ";
           driver=${driver:0:9};
           zone=$(zones $iface)
           zone="$zone     ";
           zone=${zone:0:5};
           if [ "$driver" -o "$zone" ]; then
               /sbin/ifconfig $iface | sed -r "1i$driver Zone:$zone" | sed -n -e '/^eth/{=;x;1!p;g;$!N;p;D;}' -e h | perl -pi -e 's/^\d+//';
           else
               /sbin/ifconfig $iface;
           fi;
       done;
   else
       /sbin/ifconfig "$@";
   fi

}


getip() {

   validip $1 && { echo $1; return; }
   if [ ! -d /sys/class/net/$1 ]; then
       grep -q -e "$1" /etc/shorewall/interfaces && ifconfig $(zones $1) | awk '/inet addr:/ {print $2}' | cut -d: -f2
   else
       ifconfig $1 | awk '/inet addr:/ {print $2}' | cut -d: -f2
   fi

}

zones() {

   [ -f /etc/shorewall/interfaces ] || return
   if [ "$1" ]; then
       awk '/^[^#]/ && $1 == "'$1'"{print $2}' /etc/shorewall/interfaces 
       awk '/^[^#]/ && $2 == "'$1'"{print $1}' /etc/shorewall/interfaces 
   else
       awk '/^[^#]/ {print $1}' /etc/shorewall/interfaces 
   fi

}

getdns() {

   DNS=$(awk '/^nameserver / {print $2}' /etc/resolv.conf )
   echo ${DNS:-127.0.0.1}

}

getmac() {

   cat /sys/class/net/${1:-*}/address 

}

validip() {

   local  ip=$1
   local  stat=1
   if [[ $ip =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
       OIFS=$IFS
       IFS='.'
       ip=($ip)
       IFS=$OIFS
       [[ ${ip[0]} -le 255 && ${ip[1]} -le 255 \
           && ${ip[2]} -le 255 && ${ip[3]} -le 255 ]]
       stat=$?
   fi
   return $stat

}

hostname () {

   [ -z "$2" ] && { /bin/hostname $@; return; }
   unset ip; unset fqdn
   validip $(getip $1) && ip=$(getip $1) || fqdn=$1
   validip $(getip $2) && ip=$(getip $2) || fqdn=$2
   [ "$ip" -a "$fqdn" ] || { /bin/hostname $@; return; }
   hostname=$(echo $fqdn | cut -d. -f1)
   echo "inet addr:$ip  fqdn:$fqdn  hostname:$hostname"
   sed -i '/^'$ip'[ \t]/d; /'$fqdn'/d; /^127.0.0.1[ \t]/d; /localhost/d' /etc/hosts
   sed -i '1i '$ip"\t"$fqdn' '$hostname /etc/hosts
   sed -i '1i 127.0.0.1'"\t"'localhost' /etc/hosts
   echo -n $hostname > /etc/hostname
   /bin/hostname -b $hostname

}

getnic() {

    [ -z "$1" ] && return
    for i in /sys/class/net/$1; do
        if [ -e /sys/class/net/$1 ]; then
            if [ -L /sys/class/net/$1/device ]; then driver=$(readlink -f /sys/class/net/$1/device/driver); else driver=/alias; fi
            [ "${driver##*/}" ] && echo ${driver##*/};
        fi
    done;

} 

iplist() {
	perl -MNet::IP -e 'foreach ( split /,/, join(",", @ARGV) ) { my $ip = new Net::IP($_) || die "Usage: iplist iprange\n"; do { print $ip->ip(), "\n" } while ++$ip; }' $@
}
