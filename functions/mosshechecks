#!/bin/sh
# v11.6.27

#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#
# 	function library - please call with external script
#
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

#############################################################################
# CeMoSSHe: CEntral MOnitoring in a Simple SHell Environment
#
# Copyright (C) 2003- Volker Tanger
# Copyright (C) 2011- Stefan Adams
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# For bug reports and suggestions or if you just want to talk to me please
# contact me at stefan@cogentinnovators.com
#
# Updates will be available at  http://www.cogent-it.com/software/cemosshe/
# please check there for updates prior to submitting patches!
#
# For list of changes please refer to the HISTORY file. Thanks.
#############################################################################



################################################################
###  File system and files
################################################################


#---------------------------------------------------------
# HDD-Check - device;warn;alert - MB free
#---------------------------------------------------------
function HDCheck () {
    CemossheLog "HDCheck $1"
    HD=$1
    typeset -i WARN ALERT; WARN=$2; ALERT=$3
    typeset -i VALUE
    STATUS="OK"

    # Device MBtotal MBused MBfree Percent Mount
    # /dev/sda1 98428 8823 84606 10% /
    DF=`df -Plm | fgrep "$HD" | sed -e "s/  */ /g"`
    if [ "$DF" ]; then
        VALUE=`echo $DF | cut -d " " -f 4`
        MOUNT=`echo $DF | cut -d " " -f 6`
        MESSAGE="Disk free : $VALUE MB"
        if [ $VALUE -lt $WARN ]; then STATUS="WARN"; MESSAGE="Disk tight : $VALUE MB"; fi
        if [ $VALUE -lt $ALERT ]; then STATUS="ALERT"; MESSAGE="Disk critically full : $VALUE MB"; fi
    else
        STATUS=DOWN
        VALUE=0
        MOUNT=$HD
        MESSAGE="HDD not mounted??"
    fi
    echo "HDCheck $MOUNT $MESSAGE" | Cemosshe "$HD" "$STATUS" "$VALUE"
}


#---------------------------------------------------------
# FileCheck: does file exist (e.g. Unix socket)
#---------------------------------------------------------
function FileCheck () {
    CemossheLog "FileCheck $1"
     FN="$1"

     if [ -e $FN ]; then
         MESSAGE="Files $FN exists"
         STATUS="OK"
         CODE=0
     else
         STATUS="ALERT";
         MESSAGE="File $FN does not exist"
         CODE=999
     fi
    echo "$MESSAGE" | Cemosshe "FileCheck $FN" "$STATUS" "$CODE"
}


#---------------------------------------------------------
# FileTooOld: file last changed more than ... minutes ago?
#---------------------------------------------------------
function FileTooOld () {
    CemossheLog "FileTooOld $1"
    FILENAME=$1
    MAXAGE=$2

    STATUS="UNDEF"
    MESSAGE="Something wrong with FileTooOld check for file $FILENAME"
    VALUE=0

    if [ ! -f "$FILENAME" ]; then
        STATUS="ALERT"
        MESSAGE="Error: file $FILENAME does not exist "
        VALUE=3
    else
        typeset -i FTIME=`ls -l --time-style=+%s $FILENAME | cut -d " " -f 6`
        typeset -i LTIME=`date +%s --date="$MAXAGE minutes ago"`
        if [ $FTIME -lt $LTIME ]; then
            STATUS="WARN"
            MESSAGE="Problem: file $FILENAME older than $MAXAGE minutes "
            VALUE=2
        else
            STATUS="OK"
            MESSAGE="file $FILENAME seems to be quite current "
            VALUE=1
        fi
    fi
    echo "$MESSAGE" | Cemosshe "FileTooOld $FILENAME" "$STATUS" "$VALUE"
}

#---------------------------------------------------------
# FileTooBig: filesize bigger than WARN KiloBytes
#---------------------------------------------------------
function FileTooBig () {
    CemossheLog "FileTooBig $1"
    FILENAME=$1
    typeset -i WARN=$2

    STATUS="UNDEF"
    MESSAGE="Something wrong with FileTooBig check for file $FILENAME"
    VALUE=0

    if [ ! -f "$FILENAME" ]; then
        STATUS="ALERT"
        MESSAGE="Error: file $FILENAME does not exist "
    else
        typeset -i VALUE=`ls -sk1 $FILENAME | cut -d " " -f 1`
        if [ $VALUE -gt $WARN ]; then
            STATUS="WARN"
            MESSAGE="Problem: file $FILENAME (${VALUE}kB) bigger tham $WARN kB "
        else
            STATUS="OK"
            MESSAGE="file $FILENAME seems to be small enough (${VALUE} KB)"
        fi
    fi
    echo "$MESSAGE" | Cemosshe "FileTooBig $FILENAME" "$STATUS" "$VALUE"
}



################################################################
###  CPU and processes
################################################################


#---------------------------------------------------------
# LoadCheck 5min: Warning / Alert
#---------------------------------------------------------
function LoadCheck () {
    CemossheLog "LoadCheck"
    typeset -i WARN ALERT; WARN=$1; ALERT=$2
    typeset -i LOAD
    MESSAGE=`cat /proc/loadavg | cut -d " " -f 3 | sed -e "s/ //g"`
    LOAD=`echo $MESSAGE | cut -d "." -f 1`
    STATUS="OK"
    STAT="Normal Load";
    if [ $LOAD -ge $WARN ]; then STATUS="WARN"; STAT="High Load"; fi
    if [ $LOAD -ge $ALERT ]; then STATUS="ALERT"; STAT="Critical Load"; fi
    echo "$STAT: $MESSAGE" | Cemosshe "LoadCheck" "$STATUS" "$LOAD"
}


#---------------------------------------------------------
# LoadPercentHektoCheck 5min: Warning / Alert
#---------------------------------------------------------
function LoadHektoCheck () {
    CemossheLog "LoadCheck"
    typeset -i WARN ALERT; WARN=$1; ALERT=$2
    typeset -i LOAD
    MESSAGE=`cat /proc/loadavg | cut -d " " -f 3 | sed -e "s/ //g"`
    LOAD=`echo $MESSAGE | sed -e "s/\.//" | sed -e "s/^0*//g"`
    STATUS="OK"
    STAT="Normal Load";
    if [ $LOAD -ge $WARN ]; then STATUS="WARN"; STAT="High Load"; fi
    if [ $LOAD -ge $ALERT ]; then STATUS="ALERT"; STAT="Critical Load"; fi
    echo "$STAT: $MESSAGE" | Cemosshe "LoadHektoCheck" "$STATUS" "$LOAD"
}


#---------------------------------------------------------
# Processes: Warning / Alert
#---------------------------------------------------------
function ProcessCheck () {
    CemossheLog "ProcessCheck"
    typeset -i WARN ALERT; WARN=$1; ALERT=$2
    typeset -i PROCESSES
    PROCESSES=`ps -A | wc -l`
    STATUS="OK"
    MESSAGE="Normal processes count"
    if [ $PROCESSES -ge $WARN ]; then STATUS="WARN"; MESSAGE="Many processes running"; fi
    if [ $PROCESSES -ge $ALERT ]; then STATUS="ALERT"; MESSAGE="Abnormal processes count"; fi
    echo "$MESSAGE: $PROCESSES" | Cemosshe "ProcessCheck" "$STATUS" "$PROCESSES"
}


#---------------------------------------------------------
# Zombie Processes: Warning Alert
#---------------------------------------------------------
function ZombieCheck () {
    CemossheLog "ZombieCheck"
    typeset -i WARN ALERT; WARN=$1; ALERT=$2
    typeset -i PROCESSES
    TMPFILE="$TEMPDIR/tmp.$$.$HOSTNAME.PSSTATUS"
    ps -A | fgrep "defunct" > $TMPFILE

    PROCESSES=`cat $TMPFILE | wc -l`

    if [ $PROCESSES -eq 0 ]; then
        PROCNAMES='ok'
    else
        PROCNAMES=""
        for A in `cat $TMPFILE | cut -d ":" -f 2- |cut -d " " -f 2-`; do
            PROCNAMES="$PROCNAMES +++ $A"
        done
    fi
    rm $TMPFILE

    MESSAGE="Zombie processes: $PROCESSES = $PROCNAMES"
    STATUS="OK"
    if [ $PROCESSES -gt $WARN ]; then STATUS="WARN"; fi
    if [ $PROCESSES -ge $ALERT ]; then STATUS="ALERT"; fi

    echo "$MESSAGE" | Cemosshe "ZombieCheck" "$STATUS" "$PROCESSES"
}


#---------------------------------------------------------
# ProcCheck: does a process with this string run?
#---------------------------------------------------------
function ProcCheck () {
    CemossheLog "ProcCheck"
     typeset -i PSNUM=`ps ax | fgrep "$1" | wc -l`

     if [ $PSNUM -gt 0 ]; then
         MESSAGE="Process $1 running"
         STATUS="OK"
     else
         STATUS="ALERT";
         MESSAGE="No process $1 found"
     fi
    echo "$MESSAGE" | Cemosshe "ProcCheck $FN" "$STATUS" "$PSNUM"
}


#---------------------------------------------------------
# Users: Warning interact.shell / Critical root+shell/su
#---------------------------------------------------------
function ShellCheck () {
    CemossheLog "ShellCheck"
    typeset -i RMAX UMAX; RMAX=$1; UMAX=$2
    typeset -i RUSERS RUSERSB RUSERSS
    typeset -i USERS
    RUSERSS=`ps -eo pid,user,ruser,tty,args | fgrep " -bash" | fgrep root | fgrep -v fgrep | wc -l`
    RUSERSB=`ps -eo pid,user,ruser,tty,args | fgrep " -su" | fgrep -v fgrep | wc -l`
    RUSERS=${RUSERSB}+${RUSERSS}
    USERS=`ps -eo pid,user,ruser,tty,args | fgrep " -bash" | wc -l`

    MESSAGE="No notable interactive shells"
    STATUS="OK"
    if [ $USERS -gt $UMAX ]; then
        STATUS="WARN";
        MESSAGE="$USERS interactive shells running"
    fi
    if [ $RUSERS -gt $RMAX ]; then
        STATUS="ALERT";
        MESSAGE="$RUSERS root shells (bash, su) running"
        USERS="$RUSERS"
    fi
    echo "$MESSAGE" | Cemosshe "ShellCheck" "$STATUS" "$USERS"
}

#---------------------------------------------------------
# Memory: min. free (buffer/cache corrected)
#---------------------------------------------------------
function MemCheck () {
    CemossheLog "MemCheck"
    if [ -z `which free` ]; then
        echo "$DATE;$TIME;$SYSTEMGROUP;$SYSTEMNAME;$PROPERTYGROUP;memory (general);UNDEF;0;FREE not installed - cannot perform MEMORY/RAM check" >> $TEMPDIR/tmp.$$.collected.tmp
    else
        typeset -i WMAX=$1;
        typeset -i AMAX=$2;
        typeset -i TOTAL=`free -m | fgrep "buffers/cache:" | cut -b 32-40 | sed -e "s/ //g"`

        MESSAGE="Memory free ($TOTAL MB)"
        STATUS="OK"
        if [ $TOTAL -lt $WMAX ]; then
            STATUS="WARN";
            MESSAGE="Memory congested ($TOTAL MB free)"
        fi
        if [ $TOTAL -lt $AMAX ]; then
            STATUS="ALERT";
            MESSAGE="Memory tight ($TOTAL MB free)"
        fi
        echo "$MESSAGE" | Cemosshe "MemCheck" "$STATUS" "$TOTAL"
    fi
}


#---------------------------------------------------------
# Swap:  page in/out per second
#---------------------------------------------------------
function SwapCheck () {
    CemossheLog "SwapCheck"
    if [ -z `which vmstat` ]; then
        echo "$DATE;$TIME;$SYSTEMGROUP;$SYSTEMNAME;$PROPERTYGROUP;swapping;UNDEF;0;VMSTAT not installed - cannot perform swap activity check" >> $TEMPDIR/tmp.$$.collected.tmp
    else
        typeset -i WMAX=$1;
        typeset -i AMAX=$2;
        typeset -i SI=`vmstat | tail -1 | sed -e "s/  */ /g" | cut -d " " -f 8`
        typeset -i SO=`vmstat | tail -1 | sed -e "s/  */ /g" | cut -d " " -f 9`
        typeset -i SWAPS=${SI}+${SO}

        MESSAGE="System memory seldomly swapping ($SWAPS pages/s)"
        STATUS="OK"
        if [ $TOTAL -lt $WMAX ]; then
            STATUS="WARN";
            MESSAGE="System memory swapping ($SWAPS pages/s)"
        fi
        if [ $TOTAL -lt $AMAX ]; then
            STATUS="ALERT";
            MESSAGE="System memory heavily swapping ($SWAPS pages/s)"
        fi
        echo "$MESSAGE" | Cemosshe "SwapCheck" "$STATUS" "$TOTAL"
    fi
}


################################################################
###  Queues
################################################################


#---------------------------------------------------------
# Printers: Queuename / max queue size (999=offline)
#---------------------------------------------------------
function PrintCheck () {
    CemossheLog "PrintCheck"
    if [ -z `which lpq` ]; then
        echo "$DATE;$TIME;$SYSTEMGROUP;$SYSTEMNAME;$PROPERTYGROUP;printer (general);UNDEF;0;LPQ not installed - cannot perform PRINTER check" >> $TEMPDIR/tmp.$$.collected.tmp
    else
        LP="$1"

        typeset -i MAXQUEUE=$2
        typeset -i QUEUELEN=`lpq -P $LP | wc -l`
        QUEUELEN=${QUEUELEN}-2

        MESSAGE="Printer $LP ok with $QUEUELEN print jobs in queue"
        STATUS="OK"

        if [ $QUEUELEN -gt $MAXQUEUE ]; then
            STATUS="WARN";
            MESSAGE="More than $MAXQUEUE jobs (${QUEUELEN}) for printer $LP"
        fi

        lpq -P $1 | fgrep "is ready" > /dev/null
        if [ $? -gt 0 ]; then
            STATUS="ALERT";
            MESSAGE="Printer $LP is down - $QUEUELEN jobs pending"
            QUEUELEN=999
        fi
        echo "$MESSAGE" | Cemosshe "PrintQueueCheck $LP" "$STATUS" "$QUEUELEN"
    fi
}


#---------------------------------------------------------
# Mail-Queue: max queue size (warn alert)
#---------------------------------------------------------
function MailqCheck () {
    CemossheLog "MailqCheck"
    if [ -z `which mailq` ]; then
        echo "$DATE;$TIME;$SYSTEMGROUP;$SYSTEMNAME;$PROPERTYGROUP;mailq (general);UNDEF;0;MAILQ not installed - cannot perform MailQueue check"  >> $TEMPDIR/tmp.$$.collected.tmp
    else
        typeset -i WARN="$1"
        typeset -i ALERT=$2
        typeset -i QUEUELEN=`mailq | wc -l`
        QUEUELEN=${QUEUELEN}/4

        MESSAGE="Mail Queue length: ok with $QUEUELEN mails in queue"
        STATUS="OK"

        if [ $QUEUELEN -gt $WARN ]; then
            STATUS="WARN";
            MESSAGE="Notable Mail Queue size: $QUEUELEN mails in queue"
            if [ $QUEUELEN -gt $ALERT ]; then
                STATUS="ALERT";
                MESSAGE="Excessive Mail Queue size: $QUEUELEN mails in queue"
            fi
        fi

        echo "$MESSAGE" | Cemosshe "MailQueueCheck" "$STATUS" "$QUEUELEN"
    fi
}


################################################################
###  Hardware
################################################################


#---------------------------------------------------------
# Check for CPU temp / fan speed / MB voltage...  :  Param  Warn  Alert  "Description"
# Uses mbmon program (http://freshmeat.net/projects/xmbmon)
#---------------------------------------------------------
function MBMonCheck () {
    CemossheLog "MBMonCheck $1 $4"
    PARAM=$1                # TEMP0, TEMP1...
    SWARNVAL=$2             # 38.0
    SALERTVAL=$3            # 40.0
    DESCRIP=$4              # "CPU temp"

    if ! [ -z `which mbmon` ]; then
        echo "$DATE;$TIME;$SYSTEMGROUP;$SYSTEMNAME;$PROPERTYGROUP;$PARAM;UNDEF;0;MBMON not installed - cannot perform $PARAM check" >> $TEMPDIR/tmp.$$.collected.tmp
    else
        SVALUE=`$MBMON -c 1 -r | grep "$PARAM" | sed -e "s/$PARAM *: *//"`
        FLOATP=`expr index $SVALUE \.`
        if [ "$FLOATP" != "" ] ; then
            typeset -i VALUE=${SVALUE/./}
            typeset -i ALERTVAL=${SALERTVAL/./}
            typeset -i WARNVAL=${SWARNVAL/./}
        else
            typeset -i VALUE=${SVALUE}
            typeset -i ALERTVAL=$SALERTVAL
            typeset -i WARNVAL=$SWARNVAL
        fi
        if [ "$VALUE" -gt $ALERTVAL ]; then
            STATUS="ALERT"
            MESSAGE="$DESCRIP: $SVALUE exceeds ALERT value $SALERTVAL"
        elif [ "$VALUE" -gt $WARNVAL ]; then
            STATUS="WARN"
            MESSAGE="$DESCRIP: $SVALUE exceeds WARN value $SWARNVAL"
        else
            STATUS="OK"
            MESSAGE="$DESCRIP: $SVALUE in range"
        fi
        echo "$MESSAGE" | Cemosshe "$PARAM" "$STATUS" "$SVALUE"
    fi
}


#---------------------------------------------------------
# Check for hardware sensor :  "Match" TempSensorNr  "Description"  Warn  Alert
# Uses "sensors" program (lm-sensors packet, first run "sensors-probe")
#---------------------------------------------------------
function HardwareSensor () {      # Match  Description  WarnTemp  AlertTemp
    CemossheLog "HardwareSensor $1 $2"
    typeset PARAM=$1
    DESCR=$2
    typeset -i WARN=$3
    typeset -i ALERT=$4

    if [ -z `which sensors` ]; then
        echo "$DATE;$TIME;$SYSTEMGROUP;$SYSTEMNAME;$PROPERTYGROUP;$PARAM;UNDEF;0;LM-SENSORS not installed - cannot perform temperature check" >> $TEMPDIR/tmp.$$.collected.tmp
    else
        typeset -i VALUE=`sensors | grep "^${PARAM}:" | cut -d ":" -f 2 | sed -e "s/^ *//g" | cut -d "." -f 1 | cut -d " " -f 1 | sed -e "s/\+//g" `
        if [ "$VALUE" -gt $ALERT ]; then
            STATUS="ALERT"
            MESSAGE="Hardware failing? $DESCR (${PARAM}) = $VALUE is too high"
        elif [ "$VALUE" -gt $WARN ]; then
            STATUS="WARN"
            MESSAGE="Hardware problematic: $DESCR (${PARAM}) with $VALUE above $WARN"
        else
            STATUS="OK"
            MESSAGE="Hardware ok $DESCR (${PARAM}) ok: $VALUE"
        fi
        echo "$MESSAGE" | Cemosshe "HardwareSensor $DESCR" "$STATUS" "$VALUE"
    fi
}


#---------------------------------------------------------
# Check for CPU temp :  TempSensorNr  "Description"  Warn  Alert
# Uses "sensors" program (lm-sensors packet, first run "sensors-probe")
#---------------------------------------------------------
function HardwareTemp () {      # TempSensorNr  WarnTemp  AlertTemp
    CemossheLog "HardwareTemp $1 $2"
    typeset -i PARAM=$1
    DESCR=$2
    typeset -i WARN=$3
    typeset -i ALERT=$4

    if [ -z `which sensors` ]; then
        echo "$DATE;$TIME;$SYSTEMGROUP;$SYSTEMNAME;$PROPERTYGROUP;$PARAM;UNDEF;0;LM-SENSORS not installed - cannot perform temperature check" >> $TEMPDIR/tmp.$$.collected.tmp
    else
        typeset -i VALUE=`sensors | grep -i "^temp${PARAM}:" | cut -d "+" -f 2 | cut -d "." -f 1`
        if [ "$VALUE" -gt $ALERT ]; then
            STATUS="ALERT"
            MESSAGE="Server on fire? $DESCR (Temp${PARAM}) = $VALUE is too hot"
        elif [ "$VALUE" -gt $WARN ]; then
            STATUS="WARN"
            MESSAGE="Server too warm: $DESCR (Temp${PARAM}) with $VALUE above $WARN"
        else
            STATUS="OK"
            MESSAGE="Server Temperature $DESCR (Temp${PARAM}) ok: $VALUE"
        fi
        echo "$MESSAGE" | Cemosshe "HardwareTemp $PARAM" "$STATUS" "$VALUE"
    fi
}


#---------------------------------------------------------
# Check for FanSpeed : FanNr "Descr" LowLimit HiLimit
# Uses "sensors" program (lm-sensors packet, first run "sensors-probe")
#---------------------------------------------------------
function HardwareFan () {       # FanNr "Descr" LowLimit HiLimit
    CemossheLog "HardwareFan $1 $2"
    PARAM=$1
    DESCR=$2
    LowLim=$3
    HiLim=$4

    if [ -z `which sensors` ]; then
        echo "$DATE;$TIME;$SYSTEMGROUP;$SYSTEMNAME;$PROPERTYGROUP;$PARAM;UNDEF;0;LM-SENSORS not installed - cannot perform fan-speed check" >> $TEMPDIR/tmp.$$.collected.tmp
    else
        VALUE=`sensors | grep "^Fan${PARAM}:" | cut -d ":" -f 2 | cut -d "R" -f 1`
        if [ "$VALUE" -lt $LowLim ]; then
            STATUS="ALERT"
            MESSAGE="Fan not working? $DESCR (Fan${PARAM}) = $VALUE RPM is too low"
        elif [ "$VALUE" -gt $HiLim ]; then
            STATUS="WARN"
            MESSAGE="Fan high load: $DESCR (Fan${PARAM}) with $VALUE RPM above $HiLim"
        else
            STATUS="OK"
            MESSAGE="Server Fan $DESCR (Fan${PARAM}) ok: $VALUE RPM"
        fi
        echo "$MESSAGE" | Cemosshe "HardwareFan $PARAM" "$STATUS" "$VALUE"
    fi
}



#---------------------------------------------------------
# SmartMonHealth:  health status passed or not  DEVTYPE   DEVICE
#---------------------------------------------------------
function SmartMonHealth () {
    CemossheLog "SmartMonHealth $1 $2"
    DEVTYPE=$1
    DEVICE=$2

    if [ -z `which smartctl` ]; then
        echo "$DATE;$TIME;$SYSTEMGROUP;$SYSTEMNAME;$PROPERTYGROUP;hd_$DEVICE_$DEVTYPE;UNDEF;0;SMARTCTL (smartmontools) not installed - cannot perform disk health check" >> $TEMPDIR/tmp.$$.collected.tmp
        VALUE=0
    else
        STATE=`smartctl -H -d $DEVTYPE $DEVICE | grep "^SMART overall-health self-assessment test result: " | cut -d " " -f 6-`
        if [ "$STATE" = "PASSED" ]; then
            STATUS="OK"
            MESSAGE="Disk $DEVTYPE on $DEVICE healthy"
            VALUE=1
        else
            STATUS="ALERT"
            MESSAGE="Disk $DEVTYPE on $DEVICE failing: $STATE"
            VALUE=3
        fi
        echo "$MESSAGE" | Cemosshe "SmartMonHealth $DEVICE $DEVTYPE" "$STATUS" "$VALUE"
    fi
}


#---------------------------------------------------------
# Raid3ware:  health status passed or not   ControllerNo.  Partition
#---------------------------------------------------------
function Raid3ware () {
    CemossheLog "Raid3ware $1 $2"
    CTRL=$1
    UNIT=$2

    if [ -z `which tw_cli` ]; then
        echo "$DATE;$TIME;$SYSTEMGROUP;$SYSTEMNAME;$PROPERTYGROUP;3ware_$CTRL_$UNIT;UNDEF;0;tw_cli not installed - cannot perform 3ware RAID check" >> $TEMPDIR/tmp.$$.collected.tmp
        VALUE=0
    else
        STATE=`tw_cli /c$CTRL show | grep "^$UNIT " | fgrep "RAID-"  | cut -d " " -f 8-9`
        if [ "$STATE" = " OK" -o "$STATE" = "OK " ]; then
            STATUS="OK"
            MESSAGE="3ware Controller $CTRL unit $UNIT healthy"
            VALUE=1
        else
            STATUS="ALERT"
            MESSAGE="3ware Controller $CTRL unit $UNIT has problem: $STATE"
            VALUE=3
        fi
        echo "$MESSAGE" | Cemosshe "Raid3ware $RAID $UNIT" "$STATUS" "$VALUE"
    fi
}



#---------------------------------------------------------
# Software-RAID status:  (none)
#	Depends on /proc existence.
#	Works with md0 (should be extended for more than one device)
#	but running more than one software RAID array is not recommended anyway.
#	WARN when syncing, ALERT when a partition has failed.
#---------------------------------------------------------
function RaidCheck () {
    CemossheLog "RaidCheck"
    typeset -i NUM=0
    MDSTAT="/proc/mdstat"
    if ! [ -f $MDSTAT ]; then
        echo "$DATE;$TIME;$SYSTEMGROUP;$SYSTEMNAME;$PROPERTYGROUP;RAID;UNDEF;0;$MDSTAT not present - cannot perform RAID check" >> $TEMPDIR/tmp.$$.collected.tmp
    else
        BLOCKS=$(grep blocks $MDSTAT)
        DEVICE=$(grep md $MDSTAT)
        #    easier but more processes:
        #    typeset -i FAIL=0
        #    typeset -i SYNC=0
        #    FAIL=$(grep blocks $MDSTAT | grep -c _)
        #    SYNC=$(grep -c resync $MDSTAT)
        XBLOCKS="${BLOCKS/_/}"
        XDEVICE="${DEVICE/resync/}"
        STATUS="OK"
        MESSAGE="$DEVICE - $BLOCKS"
        if [ "$DEVICE" != "$XDEVICE" ]; then
            STATUS="WARN"
            MESSAGE="RESYNC "${DEVICE}
            NUM=1
        fi
        if [ "$BLOCKS" != "$XBLOCKS" ]; then
            STATUS="ALERT"
            MESSAGE="FAILED "${DEVICE}
            NUM=2
        fi
        echo "$MESSAGE" | Cemosshe "RaidCheck" "$STATUS" "$NUM"
    fi
}

################################################################
###  Network
################################################################


#---------------------------------------------------------
# NetworkErrors:  interface  WARN:percentage  ALERT:percentage
#---------------------------------------------------------
function NetworkErrorsCheck () {
    CemossheLog "NetworkErrorsCheck $1"
    if [ -z `which netstat` ]; then
        echo "$DATE;$TIME;$SYSTEMGROUP;$SYSTEMNAME;$PROPERTYGROUP;networktraffic (general);UNDEF;0;NETSTAT not installed - cannot perform NETWORKTRAFFIC check" >> $TEMPDIR/tmp.$$.collected.tmp
    else
        IFACE="$1"
        typeset -i WARNTRAF=$2
        typeset -i ALERTRAF=$3

#eth0      Link encap:Ethernet  HWaddr FE:FD:D5:CB:F4:BC
#          inet addr:213.203.244.188  Bcast:213.203.244.188  Mask:255.255.255.255
#          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
#          RX packets:27259082 errors:0 dropped:0 overruns:0 frame:0
#          TX packets:30825801 errors:0 dropped:0 overruns:0 carrier:0
#          collisions:0 txqueuelen:1000
#          RX bytes:3895048735 (3.6 GiB)  TX bytes:2141303265 (1.9 GiB)
#          Interrupt:5

        STAT=`/sbin/ifconfig $IFACE | fgrep "RX packets"`
        typeset -i RXOK=`echo $STAT | cut -d ":" -f 2 | cut -d " " -f 1`
        typeset -i RXE1=`echo $STAT | cut -d ":" -f 3 | cut -d " " -f 1`
        typeset -i RXE2=`echo $STAT | cut -d ":" -f 4 | cut -d " " -f 1`
        typeset -i RXE3=`echo $STAT | cut -d ":" -f 5 | cut -d " " -f 1`
        typeset -i RXERR=$(( RXE1 + RXE2 + RXE3 ))
        typeset -i RXPERC=$(( RXERR * 100 / ( RXOK + 1 ) ))

        STAT=`/sbin/ifconfig $IFACE | fgrep "TX packets"`
        typeset -i TXOK=`echo $STAT | cut -d ":" -f 2 | cut -d " " -f 1`
        typeset -i TXE1=`echo $STAT | cut -d ":" -f 3 | cut -d " " -f 1`
        typeset -i TXE2=`echo $STAT | cut -d ":" -f 4 | cut -d " " -f 1`
        typeset -i TXE3=`echo $STAT | cut -d ":" -f 5 | cut -d " " -f 1`
        typeset -i TXERR=$(( TXE1 + TXE2 + TXE3 ))
        typeset -i TXPERC=$(( TXERR * 100 / (TXOK + 1)))

        typeset -i PERC=$(( TXPERC + RXPERC ))

        MESSAGE="No notable network errors on interface $IFACE"
        STATUS="OK"

        if [ $PERC -gt $WARNTRAF  ]; then
            STATUS="WARN";
            MESSAGE="Traffic errors on $IFACE: $RXPERC % in / $TXPERC % out"
        fi
        if [ $PERC -gt $ALERTRAF  ]; then
            STATUS="ALERT";
            MESSAGE="Traffic errors on $IFACE: $RXPERC % in / $TXPERC % out"
        fi
        echo "$MESSAGE" | Cemosshe "NetworkErrorsCheck $IFACE" "$STATUS" "$PERC"
    fi
}

#---------------------------------------------------------
# NetworkTraffic:  interface  WARN:byte/s  ALERT:byte/s
#---------------------------------------------------------
function NetworkTrafficCheck () {
    CemossheLog "NetworkTrafficCheck $1"
    if [ -z `which netstat` ]; then
        echo "$DATE;$TIME;$SYSTEMGROUP;$SYSTEMNAME;$PROPERTYGROUP;networktraffic (general);UNDEF;0;NETSTAT not installed - cannot perform NETWORKTRAFFIC check" >> $TEMPDIR/tmp.$$.collected.tmp
    else
        IFACE="$1"
        typeset -i WARNTRAF=$2
        typeset -i ALERTRAF=$3

        NOW=`date +%s`
        STAT=`/sbin/ifconfig $IFACE | fgrep "RX bytes"`
#          RX bytes:153523789 (146.4 MiB)  TX bytes:153523789 (146.4 MiB)
        typeset -i RX=`echo $STAT | cut -d ":" -f 2 | cut -d " " -f 1`
        typeset -i TX=`echo $STAT | cut -d ":" -f 3 | cut -d " " -f 1`
        typeset -i TOTAL=$(( RX + TX ))

        if ! [ -f "$DATADIR/stat.networktraffic.$IFACE" ]; then
            MESSAGE="Initializing network traffic analysis on interface $IFACE"
            STATUS="UNDEF"
        else
            OLDSEC=`cat "$DATADIR/stat.networktraffic.$IFACE" | cut -d " " -f 1`
            OLDTRAFFIC=`cat "$DATADIR/stat.networktraffic.$IFACE" | cut -d " " -f 2`

            typeset -i TRAFPERSEC=$(( (TOTAL - OLDTRAFFIC) / ( NOW - OLDSEC + 1) / 1024 * 8 ))

            MESSAGE="Network traffic on interface $IFACE ok: $TRAFPERSEC kbit/sec"
            STATUS="OK"

            if [ $TRAFPERSEC -gt $WARNTRAF ]; then
                STATUS="WARN";
                MESSAGE="High traffic on $IFACE: $TRAFPERSEC kbit/sec"
            fi
            if [ $TRAFPERSEC -gt $ALERTRAF ]; then
                STATUS="ALERT";
                MESSAGE="Excessive traffic on $IFACE: $TRAFPERSEC kbit/sec"
            fi
        fi
        echo "$MESSAGE" | Cemosshe "NetworkTrafficCheck $IFACE" "$STATUS" "$TRAFPERSEC"
        echo "$NOW $TOTAL" > "$DATADIR/stat.networktraffic.$IFACE"
    fi
}


################################################################
###  IDS functions
################################################################


#---------------------------------------------------------
# Check Log Files: name string logfile max occurrence (warn alert)
# 	if using wildcards escape the filename-pattern with quotes when calling
#---------------------------------------------------------
function LogEntryCheck () {
    CemossheLog "LogEntryCheck $1 "
    NAME="$1"
    MATCH="$2"
    FILE="$3"
    typeset -i WARN="$4"
    typeset -i ALERT="$5"
    typeset -i OCCUR=`cat $FILE | fgrep "${MATCH}" | wc -l`

    MESSAGE="Check $FILE for '$MATCH' - $OCCUR occurrencies"
    STATUS="OK"

    if [ $OCCUR -gt $WARN ]; then
        STATUS="WARN";
        MESSAGE="Notable occurrence of '$MATCH' in $FILE: $OCCUR"

        if [ $OCCUR -gt $ALERT ]; then
            STATUS="ALERT";
            MESSAGE="Excessive occurrence of '$MATCH' in $FILE: $OCCUR"
        fi
    fi

        echo "$MESSAGE" | Cemosshe "LogEntryCheck $NAME" "$STATUS" "$OCCUR"
}


#---------------------------------------------------------
# CheckFileChanges  KNOWNFILE  CHECKEDFILE:  are these the same?
#---------------------------------------------------------
function CheckFileChanges () {
    CemossheLog "CheckFileChanges $1"
    KNOWNSHORT=$1;
    KNOWNF="$DATADIR/CompareFiles/$KNOWNSHORT"
    ORIGF=$2;

    mkdir -p "$DATADIR/CompareFiles"
    chmod 0700 "$DATADIR/CompareFiles"
    [ ! -f $KNOWNF -a -e $ORIGF ] && cp -af "$ORIGF" "$DATADIR/CompareFiles"

    if [ ! -f "$ORIGF" ] && [ ! -f "$KNOWNF" ]; then
        MESSAGE="Neither original file $ORIGF nor comparison file $KNOWNF exist"
        STATUS="UNDEF"
        CODE=5
    elif [ ! -f "$ORIGF" ]; then
        MESSAGE="Original file $ORIGF does not exist"
        STATUS="ALERT"
        CODE=4
    elif [ ! -f "$KNOWNF" ]; then
        MESSAGE="Comparison file $KNOWNF does not exist - please generate"
        STATUS="UNDEF"
        CODE=3
    else
        diff "$KNOWNF" "$ORIGF" > /dev/null
        CODE=$?
    fi
    if [ $CODE -eq 0 ]; then
        MESSAGE="File $ORIGF stays unchanged"
        STATUS="OK"
    elif [ $CODE -eq 1 ]; then
        MESSAGE="File $ORIGF has changed"
        STATUS="WARN"
    fi
    echo "$MESSAGE" | Cemosshe "CheckFileChanges $KNOWNSHORT" "$STATUS" "$CODE"
}


#---------------------------------------------------------
# CheckConfigChanges  KNOWNFILE  "COMMAND+PARAM":  are these the same?
#---------------------------------------------------------
function CheckConfigChanges () {
    CemossheLog "CheckConfigChanges $1"
    KNOWNSHORT=$1;
    KNOWNF="$DATADIR/CompareFiles/$KNOWNSHORT"
    shift
    CMD="$@"
    CMDOUT="$TEMPDIR/tmp.$$.chkconfchanges"

    mkdir -p "$DATADIR/CompareFiles"
    chmod 0700 "$DATADIR/CompareFiles"
    [ ! -f "$KNOWNF" ] && eval "$CMD" > "$KNOWNF"

    if [ ! -f "$KNOWNF" ]; then
        MESSAGE="Comparison file $KNOWNF does not exist - please generate"
        STATUS="UNDEF"
        CODE=3
    else
        eval "$CMD" > "$CMDOUT"
        diff "$KNOWNF" "$CMDOUT" > /dev/null
        CODE=$?
    fi
    if [ $CODE -eq 0 ]; then
        MESSAGE="Configuration of  '$CMD'  stays unchanged"
        STATUS="OK"
    elif [ $CODE -eq 1 ]; then
        MESSAGE="Configuration  '$CMD'  has changed"
        STATUS="WARN"
    fi
    echo "$MESSAGE" | Cemosshe "CheckConfigChanges $KNOWNSHORT" "$STATUS" "$CODE"
    rm -f "$CMDOUT"
}


#############################################################################
#############################################################################
